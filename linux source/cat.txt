・#if, #endif
    #ifの後に書かれた条件がtrueの場合のみ#endifまでコンパイルする

・HAVE_STROPTS_H
    cmakeかgccを使っていると0を返す

・#define マクロ名 定数or式
    マクロ名は大文字で記述する。

・#undef
    マクロの定義を取り消す

・三項演算子 「?」
    条件式 ? 真の時の処理 : 偽の時の処理
    ・((h) > (i) ? (h) : (i))
        (h)が(i)よりも大きい場合(h)を返し、そうでなければ(i)を返す

・charポインタ
    文字列リテラルの先頭を示すポインタが保存される
    (文字列リテラルは実行時既にメモリ上に存在している)
    書き換えが出来ない(文字列リテラルは変更出来ないため)

・static
    静的記憶クラスを使用　静的に存在する領域にデータを保存
    一般的な関数は関数内の処理が終了すると変数が消去される

・Buffer
    入出力処理において入力と処理との間に生じるタイミングのずれを
    補うために用いられる記憶領域
    入力される側の機器で処理しきれない分のデータは一旦、バッファ
    に保持される. 処理できる状態になるとバッファに溜め置かれた
    データが受け取られ処理される.

・データ型
    char型...整数の管理 1バイト
    int型 ...整数の管理 4バイト
    float型..浮動小数点の管理 4バイト

    void型...型がないことを示す型 
             引数又は戻り値がない場合、それらをvoid型にする
             int 関数(void), void 関数(引数)
             
・記述子(descriptor)
    ファイルを識別するための目印

・usage関数
    戻り値...void
    引数.....int status

    EXIT_SUCCESS...正常終了
    EXIT_FAILURE...異常終了　定数

・fputs(const char *s, FILE *fp)
    第一引数...書き込む文字列
    第二引数...ファイルポインタ