ストリームという概念でプログラムが動く
...データの入出力、送受信を最小限の滞留とさせ低遅延処理となるよう扱う


endl; と \n
...バッファに溜まったデータを出力するかしないか
    \nはただの改行
    endlはバッファに溜まった未処理のデータを吐き出す(フラッシュ)
    ことができる
    通信するとき、一文字一文字送るには時間がかかる
    coutではendlを読むまで文字をため続ける


オペランド
    operator(オペレーター):演算子
    オペレーターで演算される値をオペランドという
        左オペランド、右オペランド

namespace 概念
    名前の競合を回避するために使用される
    別の名前空間から呼びたいなら修飾する
        namespace A
        {
            void f(){std::cout << "A" << std::endl;};
            void hoge(){
                f(); // 名前空間の中では修飾しなくても呼び出せる
            }
        }

        namespace B
        {
            void f(){std::cout << "B" << std::endl;};
            void hoge(){
                A::f(); // 別の名前空間から呼びたいなら修飾する
            }
        }

        int main()
        {
            A::f(); // A
            B::f(); // B
            A::hoge(); // A
            B::hoge(); // A
        }
    標準ライブラリはstd名前空間に定義されている
    using namespace std;を使うと、std内に定義されている関数
    をstd::無しで使えるが、自分で同じ名前の関数を定義すると、
    名前競合してエラーが起こる